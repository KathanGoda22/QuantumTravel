{"ast":null,"code":"var _s = $RefreshSig$();\nimp;\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null); // Keep data as null to handle empty cases\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(url);\n\n        // Check if the response is not OK\n        if (!res.ok) {\n          throw new Error(`HTTP error! status: ${res.status}`);\n        }\n        const contentType = res.headers.get(\"content-type\");\n\n        // Check if the response is in JSON format\n        if (!contentType || !contentType.includes(\"application/json\")) {\n          throw new Error(\"Expected JSON response but received a different content type\");\n        }\n        const result = await res.json();\n        setData(result.data);\n      } catch (err) {\n        console.error(\"Fetch Error:\", err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    error,\n    loading\n  };\n};\n_s(useFetch, \"cdnblwmK9QuMyYTkxGRQb1PLKRw=\");","map":{"version":3,"names":["imp","useFetch","url","data","setData","useState","error","setError","loading","setLoading","useEffect","fetchData","res","fetch","ok","Error","status","contentType","headers","get","includes","result","json","err","console","message"],"sources":["E:/Quantum Travel Website/tour-management/frontend/src/hooks/useFetch.js"],"sourcesContent":["imp\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null); // Keep data as null to handle empty cases\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(url);\r\n        \r\n        // Check if the response is not OK\r\n        if (!res.ok) {\r\n          throw new Error(`HTTP error! status: ${res.status}`);\r\n        }\r\n\r\n        const contentType = res.headers.get(\"content-type\");\r\n\r\n        // Check if the response is in JSON format\r\n        if (!contentType || !contentType.includes(\"application/json\")) {\r\n          throw new Error(\"Expected JSON response but received a different content type\");\r\n        }\r\n\r\n        const result = await res.json();\r\n        setData(result.data);\r\n      } catch (err) {\r\n        console.error(\"Fetch Error:\", err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, error, loading };\r\n};\r\n"],"mappings":";AAAAA,GAAG;AAEH,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAE5CK,SAAS,CAAC,MAAM;IACd,MAAMC,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACX,GAAG,CAAC;;QAE5B;QACA,IAAI,CAACU,GAAG,CAACE,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,GAAG,CAACI,MAAO,EAAC,CAAC;QACtD;QAEA,MAAMC,WAAW,GAAGL,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;QAEnD;QACA,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC7D,MAAM,IAAIL,KAAK,CAAC,8DAA8D,CAAC;QACjF;QAEA,MAAMM,MAAM,GAAG,MAAMT,GAAG,CAACU,IAAI,EAAE;QAC/BlB,OAAO,CAACiB,MAAM,CAAClB,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOoB,GAAG,EAAE;QACZC,OAAO,CAAClB,KAAK,CAAC,cAAc,EAAEiB,GAAG,CAAC;QAClChB,QAAQ,CAACgB,GAAG,CAACE,OAAO,CAAC;MACvB,CAAC,SAAS;QACRhB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDE,SAAS,EAAE;EACb,CAAC,EAAE,CAACT,GAAG,CAAC,CAAC;EAET,OAAO;IAAEC,IAAI;IAAEG,KAAK;IAAEE;EAAQ,CAAC;AACjC,CAAC;AAAC,GApCIP,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}