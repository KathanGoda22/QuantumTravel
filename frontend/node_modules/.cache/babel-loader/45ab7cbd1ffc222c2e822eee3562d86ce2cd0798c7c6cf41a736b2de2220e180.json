{"ast":null,"code":"import _classCallCheck from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nvar MAX_VELOCITY_DELTA = 30;\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\nvar collectMotionValues = {\n  current: undefined\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nvar MotionValue = /*#__PURE__*/function () {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  function MotionValue(init) {\n    var _this = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MotionValue);\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"11.0.6\";\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n    this.canTrackVelocity = false;\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n    this.events = {};\n    this.updateAndNotify = function (v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var currentTime = time.now();\n      /**\n       * If we're updating the value during another frame or eventloop\n       * than the previous frame, then the we set the previous frame value\n       * to current.\n       */\n      if (_this.updatedAt !== currentTime) {\n        _this.setPrevFrameValue();\n      }\n      _this.prev = _this.current;\n      _this.setCurrent(v);\n      // Update update subscribers\n      if (_this.current !== _this.prev && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      }\n      // Update render subscribers\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n    this.hasAnimated = false;\n    this.setCurrent(init);\n    this.canTrackVelocity = isFloat(this.current);\n    this.owner = options.owner;\n  }\n  _createClass(MotionValue, [{\n    key: \"setCurrent\",\n    value: function setCurrent(current) {\n      this.current = current;\n      this.updatedAt = time.now();\n    }\n  }, {\n    key: \"setPrevFrameValue\",\n    value: function setPrevFrameValue() {\n      var prevFrameValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.current;\n      this.prevFrameValue = prevFrameValue;\n      this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n  }, {\n    key: \"onChange\",\n    value: function onChange(subscription) {\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(false, \"value.onChange(callback) is deprecated. Switch to value.on(\\\"change\\\", callback).\");\n      }\n      return this.on(\"change\", subscription);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      var _this2 = this;\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n      var unsubscribe = this.events[eventName].add(callback);\n      if (eventName === \"change\") {\n        return function () {\n          unsubscribe();\n          /**\n           * If we have no more change listeners by the start\n           * of the next frame, stop active animations.\n           */\n          frame.read(function () {\n            if (!_this2.events.change.getSize()) {\n              _this2.stop();\n            }\n          });\n        };\n      }\n      return unsubscribe;\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners() {\n      for (var eventManagers in this.events) {\n        this.events[eventManagers].clear();\n      }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n  }, {\n    key: \"attach\",\n    value: function attach(passiveEffect, stopPassiveEffect) {\n      this.passiveEffect = passiveEffect;\n      this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n  }, {\n    key: \"set\",\n    value: function set(v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!render || !this.passiveEffect) {\n        this.updateAndNotify(v, render);\n      } else {\n        this.passiveEffect(v, this.updateAndNotify);\n      }\n    }\n  }, {\n    key: \"setWithVelocity\",\n    value: function setWithVelocity(prev, current, delta) {\n      this.set(current);\n      this.prev = undefined;\n      this.prevFrameValue = prev;\n      this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n  }, {\n    key: \"jump\",\n    value: function jump(v) {\n      this.updateAndNotify(v);\n      this.prev = v;\n      this.prevUpdatedAt = this.prevFrameValue = undefined;\n      this.stop();\n      if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n  }, {\n    key: \"get\",\n    value: function get() {\n      if (collectMotionValues.current) {\n        collectMotionValues.current.push(this);\n      }\n      return this.current;\n    }\n    /**\n     * @public\n     */\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious() {\n      return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      var currentTime = time.now();\n      if (!this.canTrackVelocity || this.prevFrameValue === undefined || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n        return 0;\n      }\n      var delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n      // Casts because of parseFloat's poor typing\n      return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n  }, {\n    key: \"start\",\n    value: function start(startAnimation) {\n      var _this3 = this;\n      this.stop();\n      return new Promise(function (resolve) {\n        _this3.hasAnimated = true;\n        _this3.animation = startAnimation(resolve);\n        if (_this3.events.animationStart) {\n          _this3.events.animationStart.notify();\n        }\n      }).then(function () {\n        if (_this3.events.animationComplete) {\n          _this3.events.animationComplete.notify();\n        }\n        _this3.clearAnimation();\n      });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.animation) {\n        this.animation.stop();\n        if (this.events.animationCancel) {\n          this.events.animationCancel.notify();\n        }\n      }\n      this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n  }, {\n    key: \"isAnimating\",\n    value: function isAnimating() {\n      return !!this.animation;\n    }\n  }, {\n    key: \"clearAnimation\",\n    value: function clearAnimation() {\n      delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearListeners();\n      this.stop();\n      if (this.stopPassiveEffect) {\n        this.stopPassiveEffect();\n      }\n    }\n  }]);\n  return MotionValue;\n}();\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\nexport { MotionValue, collectMotionValues, motionValue };","map":{"version":3,"names":["SubscriptionManager","velocityPerSecond","warnOnce","time","frame","MAX_VELOCITY_DELTA","isFloat","value","isNaN","parseFloat","collectMotionValues","current","undefined","MotionValue","init","options","version","canTrackVelocity","events","updateAndNotify","v","render","currentTime","now","updatedAt","setPrevFrameValue","prev","setCurrent","change","notify","renderRequest","hasAnimated","owner","prevFrameValue","prevUpdatedAt","subscription","process","env","NODE_ENV","on","eventName","callback","unsubscribe","add","read","getSize","stop","eventManagers","clear","passiveEffect","stopPassiveEffect","delta","set","push","Math","min","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","clearListeners","motionValue"],"sources":["E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"11.0.6\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}