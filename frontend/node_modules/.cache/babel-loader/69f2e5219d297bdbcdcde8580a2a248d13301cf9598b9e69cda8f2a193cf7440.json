{"ast":null,"code":"import _objectSpread from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nvar hiddenVisibility = {\n  visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nvar id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nvar projectionFrameData = {\n  type: \"projectionFrame\",\n  totalNodes: 0,\n  resolvedTargetDeltas: 0,\n  recalculatedProjection: 0\n};\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n    defaultParent = _ref.defaultParent,\n    measureScroll = _ref.measureScroll,\n    checkIsScrollRoot = _ref.checkIsScrollRoot,\n    _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode() {\n      var _this = this;\n      var latestValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      _classCallCheck(this, ProjectionNode);\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this node needs\n       * recalculating as a result of an updated transform or layout animation.\n       */\n      this.isProjectionDirty = false;\n      /**\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\n       */\n      this.isSharedProjectionDirty = false;\n      /**\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\n       * respected by shared nodes.\n       */\n      this.isTransformDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      this.hasTreeAnimated = false;\n      // Note: Currently only running on root node\n      this.updateScheduled = false;\n      this.projectionUpdateScheduled = false;\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n          _this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n      this.updateProjection = function () {\n        _this.projectionUpdateScheduled = false;\n        /**\n         * Reset debug counts. Manually resetting rather than creating a new\n         * object each frame.\n         */\n        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n        _this.nodes.forEach(propagateDirtyNodes);\n        _this.nodes.forEach(resolveTargetDelta);\n        _this.nodes.forEach(calcProjection);\n        _this.nodes.forEach(cleanDirtyNodes);\n        record(projectionFrameData);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        subscriptionManager && subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n      /**\n       * Lifecycles\n       */\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.hasTreeAnimated;\n        if (this.instance) return;\n        this.isSVG = isSVGElement(instance);\n        this.instance = instance;\n        var _this$options = this.options,\n          layoutId = _this$options.layoutId,\n          layout = _this$options.layout,\n          visualElement = _this$options.visualElement;\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        this.parent && this.parent.children.add(this);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          var cancelDelay;\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n              hasLayoutChanged = _ref2.hasLayoutChanged,\n              hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n              newLayout = _ref2.layout;\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            var layoutTransition = _this2.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n            var _visualElement$getPro = visualElement.getProps(),\n              onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n              onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            var targetChanged = !_this2.targetLayout || !boxEqualsRounded(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (_this2.options.layoutRoot || _this2.resumeFrom && _this2.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              var animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion || _this2.options.layoutRoot) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged) {\n                finishAnimation(_this2);\n              }\n              if (_this2.isLead() && _this2.options.onExitComplete) {\n                _this2.options.onExitComplete();\n              }\n            }\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        var stack = this.getStack();\n        stack && stack.remove(this);\n        this.parent && this.parent.children.delete(this);\n        this.instance = undefined;\n        cancelFrame(this.updateProjection);\n      }\n      // only on the root\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n      }\n      // Note: currently only running on root node\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        this.nodes && this.nodes.forEach(resetRotation);\n        this.animationId++;\n      }\n    }, {\n      key: \"getTransformTemplate\",\n      value: function getTransformTemplate() {\n        var visualElement = this.options.visualElement;\n        return visualElement && visualElement.getProps().transformTemplate;\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.root.hasTreeAnimated = true;\n        if (this.root.isUpdateBlocked()) {\n          this.options.onExitComplete && this.options.onExitComplete();\n          return;\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n          if (node.options.layoutRoot) {\n            node.willUpdate(false);\n          }\n        }\n        var _this$options2 = this.options,\n          layoutId = _this$options2.layoutId,\n          layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = this.getTransformTemplate();\n        this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.updateScheduled = false;\n        var updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) {\n          this.nodes.forEach(clearIsLayoutDirty);\n        }\n        this.isUpdating = false;\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        /**\n         * Manually flush any pending updates. Ideally\n         * we could leave this to the following requestAnimationFrame but this seems\n         * to leave a flash of incorrectly styled content.\n         */\n        var now = time.now();\n        frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n        frameData.timestamp = now;\n        frameData.isProcessing = true;\n        steps.update.process(frameData);\n        steps.preRender.process(frameData);\n        steps.render.process(frameData);\n        frameData.isProcessing = false;\n      }\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var _this3 = this;\n        if (!this.updateScheduled) {\n          this.updateScheduled = true;\n          microtask.read(function () {\n            return _this3.update();\n          });\n        }\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        if (!this.projectionUpdateScheduled) {\n          this.projectionUpdateScheduled = true;\n          frame.preRender(this.updateProjection, false, true);\n        }\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this4 = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        frame.postRender(function () {\n          if (_this4.isLayoutDirty) {\n            _this4.root.didUpdate();\n          } else {\n            _this4.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        var visualElement = this.options.visualElement;\n        visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        var phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        var needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n        if (needsMeasurement) {\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase: phase,\n            isRoot: checkIsScrollRoot(this.instance),\n            offset: measureScroll(this.instance)\n          };\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = this.getTransformTemplate();\n        var transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n        roundBox(layoutBox);\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {},\n          source: this.id\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox();\n        // Remove viewport scroll to give page-relative coordinates\n        var scroll = this.root.scroll;\n        if (scroll) {\n          translateAxis(box.x, scroll.offset.x);\n          translateAxis(box.y, scroll.offset.y);\n        }\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n            options = node.options;\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.isRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n              }\n            }\n            translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n        }\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      }\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n        this.isProjectionDirty = true;\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n    }, {\n      key: \"forceRelativeParentToResolveTarget\",\n      value: function forceRelativeParentToResolveTarget() {\n        if (!this.relativeParent) return;\n        /**\n         * If the parent target isn't up-to-date, force it to update.\n         * This is an unfortunate de-optimisation as it means any updating relative\n         * projection will cause all the relative parents to recalculate back\n         * up the tree.\n         */\n        if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n          this.relativeParent.resolveTargetDelta(true);\n        }\n      }\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var forceRecalculation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var _a;\n        /**\n         * Once the dirty status of nodes has been spread through the tree, we also\n         * need to check if we have a shared node of a different depth that has itself\n         * been dirtied.\n         */\n        var lead = this.getLead();\n        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n        this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        /**\n         * We don't use transform for this step of processing so we don't\n         * need to check whether any nodes have changed transform.\n         */\n        var canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n        if (canSkip) return;\n        var _this$options3 = this.options,\n          layout = _this$options3.layout,\n          layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        this.resolvedRelativeTargetAt = frameData.timestamp;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        if (!this.targetDelta && !this.relativeTarget) {\n          var relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n            this.relativeParent = relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n          this.forceRelativeParentToResolveTarget();\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          var _relativeParent = this.getClosestProjectingParent();\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target && this.animationProgress !== 1) {\n            this.relativeParent = _relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * Increase debug counter for resolved target deltas\n         */\n        projectionFrameData.resolvedTargetDeltas++;\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n          return undefined;\n        }\n        if (this.parent.isProjecting()) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"isProjecting\",\n      value: function isProjecting() {\n        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n        var lead = this.getLead();\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        var canSkip = true;\n        /**\n         * If this is a normal layout animation and neither this node nor its nearest projecting\n         * is dirty then we can't skip.\n         */\n        if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If this is a shared layout animation and this node's shared projection is dirty then\n         * we can't skip.\n         */\n        if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If we have resolved the target this frame we must recalculate the\n         * projection to ensure it visually represents the internal calculations.\n         */\n        if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n          canSkip = false;\n        }\n        if (canSkip) return;\n        var _this$options4 = this.options,\n          layout = _this$options4.layout,\n          layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Record previous tree scales before updating.\n         */\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n        /**\n         * If this layer needs to perform scale correction but doesn't have a target,\n         * use the layout as the target.\n         */\n        if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n          lead.target = lead.layout.layoutBox;\n          lead.targetWithTransforms = createBox();\n        }\n        var target = lead.target;\n        if (!target) {\n          /**\n           * If we don't have a target to project into, but we were previously\n           * projecting, we want to remove the stored transform and schedule\n           * a render to ensure the elements reflect the removed transform.\n           */\n          if (this.projectionTransform) {\n            this.projectionDelta = createDelta();\n            this.projectionTransform = \"none\";\n            this.scheduleRender();\n          }\n          return;\n        }\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n        /**\n         * Increase debug counter for recalculated projections\n         */\n        projectionFrameData.recalculatedProjection++;\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.options.scheduleRender && this.options.scheduleRender();\n        if (notifyAll) {\n          var stack = this.getStack();\n          stack && stack.scheduleRender();\n        }\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this5 = this;\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n        var mixedValues = _objectSpread({}, this.latestValues);\n        var targetDelta = createDelta();\n        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n          this.relativeTarget = this.relativeTargetOrigin = undefined;\n        }\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var snapshotSource = snapshot ? snapshot.source : undefined;\n        var layoutSource = this.layout ? this.layout.source : undefined;\n        var isSharedLayoutAnimation = snapshotSource !== layoutSource;\n        var stack = this.getStack();\n        var isOnlyMember = !stack || stack.members.length <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        var prevRelativeTarget;\n        this.mixTargetDelta = function (latest) {\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          _this5.setTargetDelta(targetDelta);\n          if (_this5.relativeTarget && _this5.relativeTargetOrigin && _this5.layout && _this5.relativeParent && _this5.relativeParent.layout) {\n            calcRelativePosition(relativeLayout, _this5.layout.layoutBox, _this5.relativeParent.layout.layoutBox);\n            mixBox(_this5.relativeTarget, _this5.relativeTargetOrigin, relativeLayout, progress);\n            /**\n             * If this is an unchanged relative target we can consider the\n             * projection not dirty.\n             */\n            if (prevRelativeTarget && boxEquals(_this5.relativeTarget, prevRelativeTarget)) {\n              _this5.isProjectionDirty = false;\n            }\n            if (!prevRelativeTarget) prevRelativeTarget = createBox();\n            copyBoxInto(prevRelativeTarget, _this5.relativeTarget);\n          }\n          if (isSharedLayoutAnimation) {\n            _this5.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this5.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          _this5.root.scheduleUpdateProjection();\n          _this5.scheduleRender();\n          _this5.animationProgress = progress;\n        };\n        this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this6 = this;\n        this.notifyListeners(\"animationStart\");\n        this.currentAnimation && this.currentAnimation.stop();\n        if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n          this.resumingFrom.currentAnimation.stop();\n        }\n        if (this.pendingAnimation) {\n          cancelFrame(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = frame.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this6.currentAnimation = animateSingleValue(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: function onUpdate(latest) {\n              _this6.mixTargetDelta(latest);\n              options.onUpdate && options.onUpdate(latest);\n            },\n            onComplete: function onComplete() {\n              options.onComplete && options.onComplete();\n              _this6.completeAnimation();\n            }\n          }));\n          if (_this6.resumingFrom) {\n            _this6.resumingFrom.currentAnimation = _this6.currentAnimation;\n          }\n          _this6.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        var stack = this.getStack();\n        stack && stack.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        if (this.currentAnimation) {\n          this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n          target = lead.target,\n          layout = lead.layout,\n          latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        var config = node.options.initialPromotionConfig;\n        node.promote({\n          transition: config ? config.transition : undefined,\n          preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          needsReset = _ref3.needsReset,\n          transition = _ref3.transition,\n          preserveFollowOpacity = _ref3.preserveFollowOpacity;\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return;\n        // If there's no detected rotation values, we can early return without a forced render.\n        var hasRotate = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n        var latestValues = visualElement.latestValues;\n        if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n          hasRotate = true;\n        }\n        // If there's no rotation values, we don't need to do any more.\n        if (!hasRotate) return;\n        var resetValues = {};\n        // Check the rotate value of all axes and reset to 0\n        for (var i = 0; i < transformAxes.length; i++) {\n          var key = \"rotate\" + transformAxes[i];\n          // Record the rotation and then temporarily set it to 0\n          if (latestValues[key]) {\n            resetValues[key] = latestValues[key];\n            visualElement.setStaticValue(key, 0);\n          }\n        }\n        // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n        visualElement.render();\n        // Put back all the values we reset\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles(styleProp) {\n        var _a, _b;\n        if (!this.instance || this.isSVG) return undefined;\n        if (!this.isVisible) {\n          return hiddenVisibility;\n        }\n        var styles = {\n          visibility: \"\"\n        };\n        var transformTemplate = this.getTransformTemplate();\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        var lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        var _this$projectionDelta = this.projectionDelta,\n          x = _this$projectionDelta.x,\n          y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n            correct = _scaleCorrectors$key.correct,\n            applyTo = _scaleCorrectors$key.applyTo;\n          /**\n           * Only apply scale correction to the value if we have an\n           * active projection transform. Otherwise these values become\n           * vulnerable to distortion if the element changes size without\n           * a corresponding layout animation.\n           */\n          var corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n          if (applyTo) {\n            var num = applyTo.length;\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      }\n      // Only run on root\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a;\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n      layout = _node$layout.layoutBox,\n      measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    var isShared = snapshot.source !== node.layout.source;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\n         * Ensure relative target gets resized and rerendererd\n         */\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    var visualDelta = createDelta();\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n          parentLayout = relativeParent.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    var onExitComplete = node.options.onExitComplete;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n  /**\n   * Increase debug counter for nodes encountered this frame\n   */\n  projectionFrameData.totalNodes++;\n  if (!node.parent) return;\n  /**\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\n   * no performance impact but it will allow the next child that *is* projecting\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n   * correcting.\n   */\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\n   * Propagate isSharedProjectionDirty and isTransformDirty\n   * throughout the whole tree. A future revision can take another look at\n   * this but for safety we still recalcualte shared nodes.\n   */\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n  node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n  node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mixNumber(delta.translate, 0, p);\n  output.scale = mixNumber(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mixNumber(from.min, to.min, p);\n  output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nvar userAgentContains = function userAgentContains(string) {\n  return typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n};\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nvar roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : noop;\nfunction roundAxis(axis) {\n  // Round to the nearest .5 pixels to support subpixel layouts\n  axis.min = roundPoint(axis.min);\n  axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"names":["SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEqualsRounded","isDeltaZero","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mixNumber","record","isSVGElement","animateSingleValue","clamp","cancelFrame","frameData","steps","frame","noop","time","microtask","transformAxes","hiddenVisibility","visibility","animationTarget","id","projectionFrameData","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","latestValues","parent","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","i","length","name","handler","has","set","get","add","subscriptionManager","args","notify","instance","layoutId","layout","visualElement","current","mount","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","addEventListener","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","willUpdate","remove","stack","getStack","delete","isUpdateBlocked","resetRotation","transformTemplate","shouldNotifyListeners","startUpdate","node","updateScroll","getTransformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","updateWasBlocked","unblockUpdate","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","update","process","preRender","render","read","clearSnapshot","removeLeadSnapshots","postRender","didUpdate","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","targetDelta","scheduleUpdateProjection","crossfade","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","forceRelativeParentToResolveTarget","relativeTargetOrigin","targetWithTransforms","applyTransform","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","setTargetDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","prevLead","setOptions","relegate","hasRotate","rotate","rotateX","rotateY","rotateZ","resetValues","key","setStaticValue","styleProp","_b","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","applyTransformsToTarget","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","clear","hasListeners","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis"],"sources":["E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}