{"ast":null,"code":"import _objectSpread from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_ref, key) {\n  var protectedKeys = _ref.protectedKeys,\n    needsAnimating = _ref.needsAnimating;\n  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n  var current = value.get();\n  if (Array.isArray(target)) {\n    for (var i = 0; i < target.length; i++) {\n      if (target[i] !== current) return true;\n    }\n  } else {\n    return current !== target;\n  }\n}\nfunction animateTarget(visualElement, definition) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$delay = _ref2.delay,\n    delay = _ref2$delay === void 0 ? 0 : _ref2$delay,\n    transitionOverride = _ref2.transitionOverride,\n    type = _ref2.type;\n  var _visualElement$makeTa = visualElement.makeTargetAnimatable(definition),\n    _visualElement$makeTa2 = _visualElement$makeTa.transition,\n    transition = _visualElement$makeTa2 === void 0 ? visualElement.getDefaultTransition() : _visualElement$makeTa2,\n    transitionEnd = _visualElement$makeTa.transitionEnd,\n    target = _objectWithoutProperties(_visualElement$makeTa, _excluded);\n  var willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  var animations = [];\n  var animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  var _loop = function _loop(key) {\n    var value = visualElement.getValue(key);\n    var valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      return \"continue\";\n    }\n    var valueTransition = _objectSpread({\n      delay: delay,\n      elapsed: 0\n    }, getValueTransition(transition || {}, key));\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n    if (window.HandoffAppearAnimations) {\n      var appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n      if (appearId) {\n        var elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          valueTransition.isHandoff = true;\n        }\n      }\n    }\n    var canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);\n    if (valueTransition.type === \"spring\" && (value.getVelocity() || valueTransition.velocity)) {\n      canSkip = false;\n    }\n    /**\n     * Temporarily disable skipping animations if there's an animation in\n     * progress. Better would be to track the current target of a value\n     * and compare that against valueTarget.\n     */\n    if (value.animation) {\n      canSkip = false;\n    }\n    if (canSkip) return \"continue\";\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    var animation = value.animation;\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(function () {\n        return willChange.remove(key);\n      });\n    }\n    animations.push(animation);\n  };\n  for (var key in target) {\n    var _ret = _loop(key);\n    if (_ret === \"continue\") continue;\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(function () {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","frame","shouldBlockAnimation","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","hasKeyframesChanged","value","target","current","get","Array","isArray","i","length","animateTarget","visualElement","definition","delay","transitionOverride","type","makeTargetAnimatable","transition","getDefaultTransition","transitionEnd","willChange","getValue","animations","animationTypeState","animationState","getState","valueTarget","undefined","valueTransition","elapsed","window","HandoffAppearAnimations","appearId","getProps","isHandoff","canSkip","getVelocity","velocity","animation","start","shouldReduceMotion","has","add","then","remove","push","Promise","all"],"sources":["E:/Software Development Projects/Quantum Travel Website/tour-management/frontend/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for (let i = 0; i < target.length; i++) {\n            if (target[i] !== current)\n                return true;\n        }\n    }\n    else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.isHandoff = true;\n                }\n            }\n        }\n        let canSkip = !valueTransition.isHandoff &&\n            !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */\n        if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}